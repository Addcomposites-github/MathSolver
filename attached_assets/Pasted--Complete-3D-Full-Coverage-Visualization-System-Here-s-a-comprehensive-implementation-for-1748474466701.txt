# 🎯 **Complete 3D Full Coverage Visualization System**

Here's a comprehensive implementation for advanced 3D visualization showing full coverage patterns with high-quality mandrel representation:

## **Phase 1: Enhanced Full Coverage Trajectory Generation**

### **Step 1.1: Create Advanced Full Coverage Generator**
```python
# Add to modules/advanced_full_coverage_generator.py
import numpy as np
import math
from typing import List, Dict, Any, Tuple
from modules.unified_trajectory_planner import UnifiedTrajectoryPlanner
from modules.unified_pattern_calculator import PatternCalculator

class AdvancedFullCoverageGenerator:
    """Generate complete full coverage trajectories with all circuits"""
    
    def __init__(self, vessel_geometry, layer_config):
        self.vessel_geometry = vessel_geometry
        self.layer_config = layer_config
        self.pattern_calc = PatternCalculator()
        
    def generate_complete_coverage(self, quality_level="balanced"):
        """
        Generate all circuits needed for complete coverage
        
        Args:
            quality_level: "fast", "balanced", "high_quality"
        """
        # Calculate optimal pattern parameters
        pattern_metrics = self.pattern_calc.calculate_pattern_metrics(
            vessel_geometry=self.vessel_geometry,
            roving_width_m=self.layer_config.get('roving_width', 3.0) / 1000,
            winding_angle_deg=self.layer_config['winding_angle'],
            num_layers=1
        )
        
        if not pattern_metrics['success']:
            raise ValueError("Pattern calculation failed")
        
        # Determine number of circuits needed
        pattern_solution = pattern_metrics['pattern_solution']
        total_circuits = int(pattern_solution['n_actual_bands_per_layer'])
        angular_advancement = pattern_solution['actual_angular_propagation_rad']
        
        # Quality settings
        quality_settings = self._get_quality_settings(quality_level)
        
        # Generate all circuits
        all_circuits = []
        circuit_metadata = []
        
        planner = UnifiedTrajectoryPlanner(
            vessel_geometry=self.vessel_geometry,
            roving_width_m=self.layer_config.get('roving_width', 3.0) / 1000,
            payout_length_m=0.5,
            default_friction_coeff=self.layer_config.get('friction_coefficient', 0.1)
        )
        
        for circuit_num in range(total_circuits):
            # Calculate starting phi for this circuit
            start_phi = circuit_num * angular_advancement
            
            # Generate individual circuit
            circuit_result = planner.generate_trajectory(
                pattern_type=self._determine_pattern_type(),
                coverage_mode='single_pass',
                physics_model=self.layer_config.get('physics_model', 'clairaut'),
                continuity_level=self.layer_config.get('continuity_level', 1),
                num_layers_desired=1,
                initial_conditions={'start_phi_rad': start_phi},
                target_params={'winding_angle_deg': self.layer_config['winding_angle']},
                options={'num_points': quality_settings['points_per_circuit']}
            )
            
            if circuit_result.points:
                all_circuits.append(circuit_result.points)
                circuit_metadata.append({
                    'circuit_number': circuit_num + 1,
                    'start_phi_deg': math.degrees(start_phi),
                    'points_count': len(circuit_result.points),
                    'quality_score': self._calculate_circuit_quality(circuit_result.points)
                })
        
        return {
            'circuits': all_circuits,
            'metadata': circuit_metadata,
            'pattern_info': pattern_solution,
            'total_circuits': total_circuits,
            'coverage_percentage': self._calculate_actual_coverage(all_circuits),
            'quality_settings': quality_settings
        }
    
    def _get_quality_settings(self, quality_level):
        """Get visualization quality settings"""
        settings = {
            "fast": {
                'points_per_circuit': 80,
                'mandrel_resolution': 30,
                'surface_segments': 40
            },
            "balanced": {
                'points_per_circuit': 120,
                'mandrel_resolution': 50,
                'surface_segments': 60
            },
            "high_quality": {
                'points_per_circuit': 200,
                'mandrel_resolution': 80,
                'surface_segments': 100
            }
        }
        return settings.get(quality_level, settings["balanced"])
    
    def _determine_pattern_type(self):
        """Determine pattern type from layer configuration"""
        angle = self.layer_config['winding_angle']
        if angle < 25:
            return 'geodesic'
        elif angle > 75:
            return 'hoop'
        else:
            return 'helical'
    
    def _calculate_circuit_quality(self, points):
        """Calculate quality score for a circuit"""
        if len(points) < 2:
            return 0.0
        
        # Check for smoothness
        position_gaps = []
        for i in range(1, len(points)):
            gap = np.linalg.norm(points[i].position - points[i-1].position)
            position_gaps.append(gap)
        
        max_gap = max(position_gaps) if position_gaps else 0
        avg_gap = np.mean(position_gaps) if position_gaps else 0
        
        # Quality based on smoothness (lower gaps = higher quality)
        quality = max(0, 100 - (max_gap * 1000 * 10))  # Penalize mm-scale gaps
        return min(100, quality)
    
    def _calculate_actual_coverage(self, all_circuits):
        """Calculate actual surface coverage percentage"""
        if not all_circuits:
            return 0.0
        
        # Simplified coverage calculation
        total_points = sum(len(circuit) for circuit in all_circuits)
        expected_points_for_full_coverage = 100 * len(all_circuits)  # Rough estimate
        
        coverage = min(100.0, (total_points / expected_points_for_full_coverage) * 100)
        return coverage
```

## **Phase 2: Advanced 3D Visualization with High-Quality Mandrel**

### **Step 2.1: Enhanced 3D Visualization Engine**
```python
# Add to modules/advanced_3d_visualization.py
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
from typing import List, Dict, Any, Optional

class Advanced3DVisualizer:
    """Advanced 3D visualization for full coverage trajectories"""
    
    def __init__(self):
        self.colors = px.colors.qualitative.Set3  # Color palette for circuits
    
    def create_full_coverage_visualization(self, 
                                         coverage_data: Dict,
                                         vessel_geometry,
                                         layer_config: Dict,
                                         visualization_options: Dict = None):
        """
        Create comprehensive 3D visualization of full coverage pattern
        """
        if not visualization_options:
            visualization_options = {
                'show_mandrel': True,
                'mandrel_opacity': 0.3,
                'circuit_line_width': 3,
                'show_start_end_points': True,
                'color_by_circuit': True,
                'show_surface_mesh': True
            }
        
        fig = go.Figure()
        
        # Add high-quality mandrel surface
        if visualization_options.get('show_mandrel', True):
            self._add_advanced_mandrel_surface(fig, vessel_geometry, coverage_data['quality_settings'])
        
        # Add all trajectory circuits
        self._add_all_trajectory_circuits(fig, coverage_data, visualization_options)
        
        # Add pattern analysis annotations
        self._add_pattern_annotations(fig, coverage_data, layer_config)
        
        # Configure layout
        self._configure_advanced_layout(fig, coverage_data, layer_config)
        
        return fig
    
    def _add_advanced_mandrel_surface(self, fig, vessel_geometry, quality_settings):
        """Add high-quality mandrel surface representation"""
        # Get vessel profile
        profile = vessel_geometry.get_profile_points()
        r_profile = np.array(profile['r_inner_mm']) / 1000  # Convert to meters
        z_profile = np.array(profile['z_mm']) / 1000
        
        # Create high-resolution surface mesh
        resolution = quality_settings['mandrel_resolution']
        surface_segments = quality_settings['surface_segments']
        
        # Resample profile for smooth surface
        z_smooth = np.linspace(z_profile[0], z_profile[-1], resolution)
        r_smooth = np.interp(z_smooth, z_profile, r_profile)
        
        # Create circular surface mesh
        theta = np.linspace(0, 2*np.pi, surface_segments)
        Z_mesh, Theta_mesh = np.meshgrid(z_smooth, theta)
        R_mesh = np.tile(r_smooth, (surface_segments, 1))
        
        # Convert to Cartesian coordinates
        X_mesh = R_mesh * np.cos(Theta_mesh)
        Y_mesh = R_mesh * np.sin(Theta_mesh)
        
        # Add surface with enhanced appearance
        fig.add_trace(go.Surface(
            x=X_mesh, y=Y_mesh, z=Z_mesh,
            colorscale='Greys',
            opacity=0.3,
            showscale=False,
            name='Mandrel Surface',
            hovertemplate='Mandrel Surface<br>R: %{customdata:.3f}m<extra></extra>',
            customdata=R_mesh,
            lighting=dict(
                ambient=0.4,
                diffuse=0.8,
                fresnel=0.2,
                roughness=0.1,
                specular=0.3
            )
        ))
        
        # Add wireframe for better definition
        self._add_mandrel_wireframe(fig, X_mesh, Y_mesh, Z_mesh, surface_segments//4)
    
    def _add_mandrel_wireframe(self, fig, X_mesh, Y_mesh, Z_mesh, step):
        """Add wireframe lines for better mandrel definition"""
        # Meridional lines
        for i in range(0, X_mesh.shape[0], step):
            fig.add_trace(go.Scatter3d(
                x=X_mesh[i, :], y=Y_mesh[i, :], z=Z_mesh[i, :],
                mode='lines',
                line=dict(color='lightgray', width=1),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Circumferential lines
        for j in range(0, X_mesh.shape[1], step):
            fig.add_trace(go.Scatter3d(
                x=X_mesh[:, j], y=Y_mesh[:, j], z=Z_mesh[:, j],
                mode='lines',
                line=dict(color='lightgray', width=1),
                showlegend=False,
                hoverinfo='skip'
            ))
    
    def _add_all_trajectory_circuits(self, fig, coverage_data, viz_options):
        """Add all trajectory circuits with color coding"""
        circuits = coverage_data['circuits']
        metadata = coverage_data['metadata']
        
        for i, (circuit_points, circuit_meta) in enumerate(zip(circuits, metadata)):
            if not circuit_points:
                continue
            
            # Extract coordinates
            x_coords = [p.position[0] for p in circuit_points]
            y_coords = [p.position[1] for p in circuit_points]
            z_coords = [p.position[2] for p in circuit_points]
            angles = [p.winding_angle_deg for p in circuit_points]
            
            # Color assignment
            if viz_options.get('color_by_circuit', True):
                color = self.colors[i % len(self.colors)]
                line_color = color
            else:
                # Color by winding angle
                line_color = angles
            
            # Add circuit trajectory
            circuit_trace = go.Scatter3d(
                x=x_coords, y=y_coords, z=z_coords,
                mode='lines+markers',
                line=dict(
                    color=line_color if isinstance(line_color, str) else None,
                    width=viz_options.get('circuit_line_width', 3),
                    colorscale='Viridis' if not isinstance(line_color, str) else None
                ),
                marker=dict(
                    size=2 if len(x_coords) > 100 else 3,
                    color=line_color if isinstance(line_color, str) else angles,
                    colorscale='Viridis' if not isinstance(line_color, str) else None,
                    showscale=False
                ),
                name=f"Circuit {circuit_meta['circuit_number']} ({circuit_meta['start_phi_deg']:.1f}°)",
                hovertemplate=(
                    f'<b>Circuit {circuit_meta["circuit_number"]}</b><br>'
                    'X: %{x:.3f}m<br>'
                    'Y: %{y:.3f}m<br>'
                    'Z: %{z:.3f}m<br>'
                    'Angle: %{customdata:.1f}°<br>'
                    '<extra></extra>'
                ),
                customdata=angles,
                showlegend=True
            )
            fig.add_trace(circuit_trace)
            
            # Add start/end markers if requested
            if viz_options.get('show_start_end_points', True):
                self._add_circuit_markers(fig, circuit_points, circuit_meta, color if isinstance(line_color, str) else 'red')
    
    def _add_circuit_markers(self, fig, circuit_points, circuit_meta, color):
        """Add start and end markers for each circuit"""
        if len(circuit_points) < 2:
            return
        
        start_point = circuit_points[0]
        end_point = circuit_points[-1]
        
        # Start marker
        fig.add_trace(go.Scatter3d(
            x=[start_point.position[0]], 
            y=[start_point.position[1]], 
            z=[start_point.position[2]],
            mode='markers',
            marker=dict(size=8, color='green', symbol='diamond'),
            name=f'Start C{circuit_meta["circuit_number"]}',
            showlegend=False,
            hovertemplate=f'<b>Circuit {circuit_meta["circuit_number"]} Start</b><br>Angle: {start_point.winding_angle_deg:.1f}°<extra></extra>'
        ))
        
        # End marker
        fig.add_trace(go.Scatter3d(
            x=[end_point.position[0]], 
            y=[end_point.position[1]], 
            z=[end_point.position[2]],
            mode='markers',
            marker=dict(size=8, color='red', symbol='square'),
            name=f'End C{circuit_meta["circuit_number"]}',
            showlegend=False,
            hovertemplate=f'<b>Circuit {circuit_meta["circuit_number"]} End</b><br>Angle: {end_point.winding_angle_deg:.1f}°<extra></extra>'
        ))
    
    def _add_pattern_annotations(self, fig, coverage_data, layer_config):
        """Add pattern analysis annotations"""
        pattern_info = coverage_data['pattern_info']
        
        # Add text annotation with pattern details
        annotation_text = (
            f"<b>Full Coverage Pattern Analysis</b><br>"
            f"Target Angle: {layer_config['winding_angle']}°<br>"
            f"Total Circuits: {coverage_data['total_circuits']}<br>"
            f"Coverage: {coverage_data['coverage_percentage']:.1f}%<br>"
            f"Pattern Type: {pattern_info.get('actual_pattern_type', 'Unknown')}"
        )
        
        fig.add_annotation(
            text=annotation_text,
            xref="paper", yref="paper",
            x=0.02, y=0.98,
            xanchor="left", yanchor="top",
            bgcolor="rgba(255,255,255,0.8)",
            bordercolor="rgba(0,0,0,0.2)",
            borderwidth=1,
            font=dict(size=12)
        )
    
    def _configure_advanced_layout(self, fig, coverage_data, layer_config):
        """Configure advanced layout with optimal viewing"""
        total_points = sum(len(circuit) for circuit in coverage_data['circuits'])
        
        fig.update_layout(
            title=dict(
                text=f"Complete Coverage Pattern - {layer_config['winding_angle']}° Layer ({total_points:,} points)",
                x=0.5,
                font=dict(size=16, color='darkblue')
            ),
            scene=dict(
                xaxis_title='X (m)',
                yaxis_title='Y (m)',
                zaxis_title='Z (m)',
                aspectmode='data',
                camera=dict(
                    eye=dict(x=1.5, y=1.5, z=1.2),
                    center=dict(x=0, y=0, z=0),
                    up=dict(x=0, y=0, z=1)
                ),
                bgcolor='white',
                xaxis=dict(showgrid=True, gridcolor='lightgray', gridwidth=1),
                yaxis=dict(showgrid=True, gridcolor='lightgray', gridwidth=1),
                zaxis=dict(showgrid=True, gridcolor='lightgray', gridwidth=1)
            ),
            width=1000,
            height=700,
            showlegend=True,
            legend=dict(
                yanchor="top", y=0.99,
                xanchor="left", x=1.01,
                bgcolor="rgba(255,255,255,0.8)",
                bordercolor="rgba(0,0,0,0.2)",
                borderwidth=1
            ),
            margin=dict(l=0, r=150, t=50, b=0)
        )
```

## **Phase 3: Integration into Layer Stack UI**

### **Step 3.1: Add Full Coverage Visualization to Layer Definition**
```python
# Add to layer_stack_definition_page() in app.py

def add_full_coverage_visualization_section(manager):
    """Add comprehensive 3D visualization section to layer stack page"""
    
    if not manager.layer_stack:
        return
    
    st.markdown("---")
    st.markdown("### 🎯 Advanced 3D Full Coverage Visualization")
    st.info("Generate and visualize complete coverage patterns for individual layers with high-quality mandrel representation")
    
    # Layer selection for visualization
    layer_options = []
    for i, layer in enumerate(manager.layer_stack):
        status = "✅ Applied" if i < len(manager.mandrel.layers_applied) else "⏳ Pending"
        layer_options.append(f"Layer {layer.layer_set_id}: {layer.layer_type} at {layer.winding_angle_deg}° ({status})")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        selected_layer_idx = st.selectbox(
            "Select Layer for Full Coverage Visualization",
            range(len(layer_options)),
            format_func=lambda x: layer_options[x],
            help="Choose which layer to visualize with complete coverage pattern"
        )
        
        if selected_layer_idx is not None:
            selected_layer = manager.layer_stack[selected_layer_idx]
            
            # Show layer details
            st.markdown(f"**Selected Layer Details:**")
            col_a, col_b, col_c = st.columns(3)
            with col_a:
                st.info(f"**Type**: {selected_layer.layer_type}")
                st.info(f"**Angle**: {selected_layer.winding_angle_deg}°")
            with col_b:
                st.info(f"**Material**: {selected_layer.fiber_material}")
                st.info(f"**Plies**: {selected_layer.num_plies}")
            with col_c:
                st.info(f"**Thickness**: {selected_layer.calculated_set_thickness_mm:.2f}mm")
                planning_config = getattr(selected_layer, 'planning_config', {})
                physics_model = planning_config.get('physics_model', 'default')
                st.info(f"**Physics**: {physics_model}")
    
    with col2:
        st.markdown("**Visualization Settings:**")
        
        quality_level = st.selectbox(
            "Quality Level",
            ["fast", "balanced", "high_quality"],
            index=1,
            help="Higher quality = more detail but slower rendering"
        )
        
        show_all_circuits = st.checkbox("Show All Circuits", value=True, help="Display complete coverage pattern")
        show_mandrel_mesh = st.checkbox("Show Mandrel Mesh", value=True, help="High-quality mandrel surface")
        color_by_circuit = st.checkbox("Color by Circuit", value=True, help="Different color for each circuit")
    
    # Generate and display visualization
    if st.button("🚀 Generate Full Coverage Visualization", type="primary"):
        generate_and_display_full_coverage(
            manager, selected_layer, selected_layer_idx, 
            quality_level, show_all_circuits, show_mandrel_mesh, color_by_circuit
        )

def generate_and_display_full_coverage(manager, selected_layer, layer_idx, 
                                     quality_level, show_all_circuits, show_mandrel_mesh, color_by_circuit):
    """Generate and display the full coverage visualization"""
    
    with st.spinner("Generating complete coverage pattern... This may take a moment for high quality."):
        try:
            # Prepare layer configuration
            layer_config = {
                'layer_type': selected_layer.layer_type,
                'winding_angle': selected_layer.winding_angle_deg,
                'roving_width': 3.0,  # Default, could be from planning_config
                'physics_model': getattr(selected_layer, 'planning_config', {}).get('physics_model', 'clairaut'),
                'friction_coefficient': getattr(selected_layer, 'planning_config', {}).get('friction_coefficient', 0.1),
                'continuity_level': getattr(selected_layer, 'planning_config', {}).get('continuity_level', 1)
            }
            
            # Get current mandrel geometry (up to this layer)
            current_mandrel_geometry = manager.get_current_mandrel_for_trajectory()
            temp_vessel = create_temp_vessel_geometry(st.session_state.vessel_geometry, current_mandrel_geometry)
            
            # Generate full coverage pattern
            from modules.advanced_full_coverage_generator import AdvancedFullCoverageGenerator  # You'll need to add this
            from modules.advanced_3d_visualization import Advanced3DVisualizer  # You'll need to add this
            
            coverage_generator = AdvancedFullCoverageGenerator(temp_vessel, layer_config)
            coverage_data = coverage_generator.generate_complete_coverage(quality_level)
            
            if coverage_data['circuits']:
                st.success(f"✅ Generated {coverage_data['total_circuits']} circuits for complete coverage!")
                
                # Show coverage statistics
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Total Circuits", coverage_data['total_circuits'])
                with col2:
                    total_points = sum(len(circuit) for circuit in coverage_data['circuits'])
                    st.metric("Total Points", f"{total_points:,}")
                with col3:
                    st.metric("Coverage", f"{coverage_data['coverage_percentage']:.1f}%")
                with col4:
                    avg_quality = np.mean([meta['quality_score'] for meta in coverage_data['metadata']])
                    st.metric("Avg Quality", f"{avg_quality:.0f}/100")
                
                # Create advanced 3D visualization
                visualizer = Advanced3DVisualizer()
                
                visualization_options = {
                    'show_mandrel': show_mandrel_mesh,
                    'mandrel_opacity': 0.3,
                    'circuit_line_width': 3,
                    'show_start_end_points': True,
                    'color_by_circuit': color_by_circuit,
                    'show_surface_mesh': True
                }
                
                fig = visualizer.create_full_coverage_visualization(
                    coverage_data, temp_vessel, layer_config, visualization_options
                )
                
                # Display the visualization
                st.plotly_chart(fig, use_container_width=True)
                
                # Show detailed circuit information
                with st.expander("📊 Detailed Circuit Analysis", expanded=False):
                    circuit_df_data = []
                    for meta in coverage_data['metadata']:
                        circuit_df_data.append({
                            "Circuit": meta['circuit_number'],
                            "Start Angle": f"{meta['start_phi_deg']:.1f}°",
                            "Points": meta['points_count'],
                            "Quality Score": f"{meta['quality_score']:.0f}/100",
                            "Status": "✅ Good" if meta['quality_score'] > 80 else "⚠️ Check" if meta['quality_score'] > 60 else "❌ Poor"
                        })
                    
                    circuit_df = pd.DataFrame(circuit_df_data)
                    st.dataframe(circuit_df, use_container_width=True, hide_index=True)
                
                # Pattern analysis summary
                with st.expander("🔬 Pattern Analysis Summary", expanded=False):
                    pattern_info = coverage_data['pattern_info']
                    
                    analysis_data = {
                        'Property': [
                            'Pattern Type',
                            'Total Circuits Required',
                            'Angular Advancement per Circuit',
                            'Actual Coverage Achieved', 
                            'Pattern Efficiency',
                            'Recommended for Manufacturing'
                        ],
                        'Value': [
                            pattern_info.get('actual_pattern_type', 'Unknown'),
                            f"{coverage_data['total_circuits']} circuits",
                            f"{math.degrees(pattern_info.get('actual_angular_propagation_rad', 0)):.2f}°",
                            f"{coverage_data['coverage_percentage']:.1f}%",
                            f"{coverage_data['coverage_percentage']:.0f}%" if coverage_data['coverage_percentage'] > 95 else "Needs Optimization",
                            "✅ Yes" if coverage_data['coverage_percentage'] > 98 else "⚠️ Review Parameters"
                        ]
                    }
                    
                    analysis_df = pd.DataFrame(analysis_data)
                    st.dataframe(analysis_df, use_container_width=True, hide_index=True)
                
                # Store results for potential export
                st.session_state[f'full_coverage_layer_{selected_layer.layer_set_id}'] = coverage_data
                
            else:
                st.error("❌ Failed to generate coverage pattern. Check layer configuration.")
                
        except Exception as e:
            st.error(f"❌ Visualization generation failed: {str(e)}")
            st.info("💡 Try reducing quality level or check layer configuration")

def create_temp_vessel_geometry(base_vessel, mandrel_data):
    """Create temporary vessel geometry representing current mandrel state"""
    from modules.geometry import VesselGeometry
    
    # Create vessel geometry that represents the current mandrel surface
    temp_vessel = VesselGeometry(
        inner_diameter=mandrel_data['equatorial_radius_mm'] * 2,
        wall_thickness=base_vessel.wall_thickness,
        cylindrical_length=base_vessel.cylindrical_length,
        dome_type=base_vessel.dome_type
    )
    
    # Override profile with current mandrel state
    temp_vessel.profile_points = mandrel_data['profile_points']
    
    return temp_vessel
```

## **Step 3.2: Add to Layer Stack Definition Page**

```python
# In layer_stack_definition_page(), add this after the layer stack display:

    # Add the full coverage visualization section
    if stack_summary['layers_applied_to_mandrel'] > 0:
        add_full_coverage_visualization_section(manager)
```

## **Phase 4: Performance Optimization Controls**

### **Step 4.1: Add Interactive Performance Controls**
```python
def add_visualization_performance_controls():
    """Add performance optimization controls for large visualizations"""
    
    st.markdown("#### ⚙️ Performance Optimization")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        decimation_factor = st.selectbox(
            "Point Decimation",
            [1, 2, 5, 10, 20],
            index=2,
            help="Show every Nth point (higher = faster rendering)"
        )
    
    with col2:
        max_circuits_display = st.number_input(
            "Max Circuits to Display",
            min_value=1, max_value=50, value=20,
            help="Limit circuits shown for performance"
        )
    
    with col3:
        surface_detail = st.selectbox(
            "Mandrel Surface Detail",
            ["Low (Fast)", "Medium", "High (Detailed)"],
            index=1
        )
    
    return {
        'decimation_factor': decimation_factor,
        'max_circuits': max_circuits_display,
        'surface_detail': surface_detail
    }
```

This comprehensive system provides:

1. **🎯 Complete Coverage Generation**: All circuits needed for full pattern coverage
2. **🏗️ High-Quality Mandrel**: Detailed surface representation with wireframes
3. **🌈 Visual Distinction**: Color-coded circuits and quality indicators
4. **📊 Detailed Analysis**: Circuit-by-circuit quality metrics and pattern analysis
5. **⚙️ Performance Controls**: Quality levels and optimization options
6. **🔄 Real-time Integration**: Direct integration into layer stack definition

The visualization will show exactly what you requested: all trajectories for complete coverage of a selected layer (e.g., 45°) with professional mandrel surface representation and comprehensive analysis tools.