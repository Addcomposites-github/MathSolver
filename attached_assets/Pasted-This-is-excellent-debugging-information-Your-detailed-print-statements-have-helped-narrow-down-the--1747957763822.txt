This is excellent debugging information! Your detailed print statements have helped narrow down the situation significantly.

Here's what the latest output tells us:

1.  **`DEBUG geometry.py, generate_profile(): self.profile_points JUST ASSIGNED.`**
    * This confirms (again) that your `VesselGeometry.generate_profile()` method correctly creates the `self.profile_points` dictionary with the key `'r_inner'`, and the value is a NumPy array of length 102. This is perfect.
    * The fact that it appears only once in this log segment suggests that `generate_profile()` is being called once as expected before `TrajectoryPlanner` needs the data.

2.  **`DEBUG trajectories.py: Entering TrajectoryPlanner.__init__`**
    * The lines:
        * `Vessel dome_type: Elliptical`
        * `Vessel initial profile_points: {'r_inner': array(...), 'z': array(...), ...}` (This shows the already populated dictionary)
        * `DEBUG trajectories.py: After potential generate_profile call in TrajectoryPlanner init:`
        * `self.vessel.profile_points type: <class 'dict'>`
        * `Keys in self.vessel.profile_points: ['r_inner', 'z', 'r_outer', 'dome_height']`
        * `'r_inner' key FOUND. Length: 102`
    * All these conclusively show that when `TrajectoryPlanner` is initialized, and *right before* it's about to call `self._calculate_effective_polar_opening()`, the `self.vessel.profile_points` attribute is a dictionary, and it **correctly contains the `'r_inner'` key** with a valid NumPy array.

3.  **The error message you are still seeing (`Error calculating trajectory: 'r_inner'`)** must therefore originate *during or after* the call to `self._calculate_effective_polar_opening()`, which in turn calls `_get_slope_dz_drho_at_rho()`.

**The missing piece of information is the output from the debug prints that should be *inside* `_get_slope_dz_drho_at_rho()`.**

If the `KeyError: 'r_inner'` is indeed happening at the line:
`rho_profile_m = self.vessel.profile_points['r_inner'] * 1e-3`
within `_get_slope_dz_drho_at_rho()`, then the debug prints I provided for the *beginning* of that specific method would tell us if `self.vessel.profile_points` somehow changed or lost the key between the end of the `__init__` prints and the execution of that line.

**Please do the following:**

1.  **Triple-check** that the following debug print block is present at the **very top** of your `_get_slope_dz_drho_at_rho` method in `trajectories.py`:

    ```python
    def _get_slope_dz_drho_at_rho(self, rho_target_m: float) -> float:
        # ***** ENSURE THESE DEBUG PRINTS ARE EXECUTED *****
        print(f"\nDEBUG trajectories.py: --- INSIDE _get_slope_dz_drho_at_rho ---")
        print(f"  rho_target_m for slope calculation: {rho_target_m}")
        print(f"  Type of self.vessel.profile_points at this point: {type(self.vessel.profile_points)}")
        if isinstance(self.vessel.profile_points, dict):
            print(f"  Keys in self.vessel.profile_points at this point: {list(self.vessel.profile_points.keys())}")
            if 'r_inner' not in self.vessel.profile_points:
                print("  CRITICAL ERROR _get_slope: 'r_inner' IS MISSING when _get_slope_dz_drho_at_rho is entered!")
            else:
                print(f"  _get_slope: 'r_inner' IS PRESENT. Length: {len(self.vessel.profile_points['r_inner'])}")
        else:
            print(f"  CRITICAL ERROR _get_slope: self.vessel.profile_points is NOT a dict here! It is: {self.vessel.profile_points}")
        # **********************************************************

        try:
            rho_profile_m = self.vessel.profile_points['r_inner'] * 1e-3 
            # ... rest of method
    ```

2.  **Run your script again.**

3.  **Provide the output that includes these *new* prints from *inside* `_get_slope_dz_drho_at_rho()`, along with the full Python traceback for the `KeyError: 'r_inner'`.**

The traceback is very important because it will show:
* The exact file and line number where the `KeyError` is raised.
* The call stack (which functions called which functions leading up to the error).

If the debug prints inside `_get_slope_dz_drho_at_rho` show that `'r_inner'` is indeed missing at that point, it would indicate a very subtle bug where `self.vessel.profile_points` is modified unexpectedly. If the prints show `'r_inner'` *is* present, and the `KeyError` still happens on the next line, it would be extremely unusual and might point to an environment or Python interpreter quirk, or a misunderstanding of how NumPy arrays within dictionaries are behaving in your specific setup (though this is rare for simple key access).

Let's get that internal debug output and the traceback.