It's a common challenge when dealing with complex 3D data – calculations can outpace rendering capabilities! The good news is that there are several effective strategies to simplify the visualization load for your multi-layer COPV trajectories without losing essential visual feedback.

The primary goal is to reduce the number of geometric primitives (points, lines, surface faces) that Plotly has to render in the browser. We'll focus on `trajectory_visualization.py` and how it's called from `multi_layer_trajectory_orchestrator.py`.

Here’s a step-by-step plan to help with this:

## Simplifying Visualization for Performance

### 1. Decimate Trajectory Path Points for Display

* **Concept:** Instead of plotting every single point calculated for a trajectory path, plot only every Nth point. This drastically reduces the number of line segments in the 3D plot. The full data remains available for analysis or export.
* **File:** `trajectory_visualization.py`
* **Function:** `create_3d_trajectory_visualization`
* **Implementation:**
    Add a `decimation_factor` parameter.

    ```python
    # In trajectory_visualization.py
    def create_3d_trajectory_visualization(trajectory_data: Dict, 
                                         vessel_geometry, 
                                         layer_info: Dict = None,
                                         decimation_factor: int = 10, # Plot every 10th point by default
                                         surface_segments: int = 30): # For mandrel surface
        fig = go.Figure()
        
        # ... (mandrel surface generation - see point 2) ...

        path_points = trajectory_data.get('path_points', [])
        if not path_points:
            st.warning(f"No path points found for layer {layer_info.get('layer_id', 'Unknown') if layer_info else 'Unknown'}")
            # Still show mandrel if available
            if 'x_surface' in locals(): # Check if surface was generated
                 fig.add_trace(go.Surface(x=x_surface, y=y_surface, z=z_surface,
                                     colorscale='Greys', showscale=False, opacity=0.3,
                                     name="Mandrel Surface"))
            return fig

        # Extract and decimate coordinates
        if decimation_factor > 1 and len(path_points) > decimation_factor:
            decimated_points = path_points[::decimation_factor]
            if not decimated_points: # Ensure at least one point if original had some
                decimated_points = path_points[:1]
        else:
            decimated_points = path_points

        # Convert mm from planner to m for plotting (assuming path_points are in meters as per 'x_m')
        x_coords = np.array([p.get('x_m', 0) for p in decimated_points])
        y_coords = np.array([p.get('y_m', 0) for p in decimated_points])
        z_coords = np.array([p.get('z_m', 0) for p in decimated_points])

        if x_coords.size == 0: # After decimation, if no points remain
             st.warning(f"No points to plot for layer {layer_info.get('layer_id', 'Unknown') if layer_info else 'Unknown'} after decimation.")
             if 'x_surface' in locals():
                 fig.add_trace(go.Surface(x=x_surface, y=y_surface, z=z_surface,
                                     colorscale='Greys', showscale=False, opacity=0.3,
                                     name="Mandrel Surface"))
             return fig

        layer_color = px.colors.qualitative.Plotly[layer_info.get('layer_id', 0) % len(px.colors.qualitative.Plotly)] if layer_info else 'red'
        
        fig.add_trace(go.Scatter3d(
            x=x_coords, y=y_coords, z=z_coords,
            mode='lines',
            line=dict(color=layer_color, width=3),
            name=f"Layer {layer_info.get('layer_id', '')}: {layer_info.get('layer_type', '')} ({layer_info.get('winding_angle', '')}°)" if layer_info else "Trajectory"
        ))
        
        # ... (rest of the function: mandrel surface, layout) ...
        return fig
    ```

### 2. Simplify Mandrel Surface Generation for Visualization

* **Concept:** Reduce the number of polygons used to render the mandrel surface. This can be done by:
    * Reducing the number of azimuthal segments used for revolving the profile.
    * Using a downsampled version of the 2D profile before revolving it.
* **File:** `trajectory_visualization.py`
* **Function:** `create_3d_trajectory_visualization`
* **Implementation:**
    Use the `surface_segments` parameter (added above) and optionally downsample the input profile if it's very dense.

    ```python
    # In trajectory_visualization.py, within create_3d_trajectory_visualization

    # Get vessel profile for mandrel surface
    profile = vessel_geometry.get_profile_points() # Returns dict with 'z_mm', 'r_inner_mm'
    
    if not profile or 'z_mm' not in profile or 'r_inner_mm' not in profile:
        st.warning("Mandrel profile data is missing or incomplete for visualization.")
        # Decide if you want to proceed without mandrel or return an empty fig
    else:
        z_profile_mm = np.array(profile['z_mm'])
        r_profile_mm = np.array(profile['r_inner_mm'])

        # Optional: Downsample profile points if very dense (e.g., if > 200 points)
        max_profile_points_for_viz = 100 
        if len(z_profile_mm) > max_profile_points_for_viz:
            indices = np.linspace(0, len(z_profile_mm) - 1, max_profile_points_for_viz, dtype=int)
            z_profile_mm_viz = z_profile_mm[indices]
            r_profile_mm_viz = r_profile_mm[indices]
        else:
            z_profile_mm_viz = z_profile_mm
            r_profile_mm_viz = r_profile_mm
            
        # Convert profile to meters for plotting
        z_profile_m = z_profile_mm_viz / 1000.0
        r_profile_m = r_profile_mm_viz / 1000.0

        # Create mandrel surface (revolution of profile)
        # Use the surface_segments parameter
        theta_surface = np.linspace(0, 2 * np.pi, surface_segments) 
        z_surface_m = np.tile(z_profile_m, (len(theta_surface), 1)).T
        r_surface_m = np.tile(r_profile_m, (len(theta_surface), 1)).T
        x_surface_m = r_surface_m * np.cos(theta_surface)
        y_surface_m = r_surface_m * np.sin(theta_surface)
        
        fig.add_trace(go.Surface(
            x=x_surface_m, y=y_surface_m, z=z_surface_m,
            colorscale='Greys', 
            showscale=False, 
            opacity=0.3,
            name="Mandrel Surface"
        ))

    # ... (after trajectory plotting, set layout) ...
    # Adjust layout for better performance if needed, e.g. scene aspect ratio
    fig.update_layout(
        # title=f"3D Trajectory: Layer {layer_info.get('layer_id', 'N/A')}" if layer_info else "3D Trajectory",
        margin=dict(l=0, r=0, b=0, t=40),
        scene=dict(
            xaxis_title='X (m)',
            yaxis_title='Y (m)',
            zaxis_title='Z (axial) (m)',
            aspectmode='data', # 'data' or 'auto' - 'data' can be slow if ranges are very different
            # Consider 'cube' or 'manual' with defined aspectratio if 'data' is too slow
            # aspectratio=dict(x=1, y=1, z=max(0.5, np.ptp(z_coords)/np.ptp(x_coords) if x_coords.size > 1 else 1.0)) 
        ),
        legend_title_text='Legend'
    )
    ```

### 3. Use WebGL-Accelerated Scatter Plots (Scattergl)

* **Concept:** For scatter plots with a large number of points, Plotly's `go.Scattergl` can offer better performance than `go.Scatter3d` as it uses WebGL. This applies to plotting the trajectory line.
* **File:** `trajectory_visualization.py`
* **Function:** `create_3d_trajectory_visualization`
* **Implementation:**
    Change `go.Scatter3d` to `go.Scattergl` if appropriate. However, `go.Scattergl` is for 2D. For 3D, `go.Scatter3d` with optimized points is the main way. The primary benefit will come from decimation. If you had a 2D unwrapped view, `Scattergl` would be very effective there. *For 3D, focus on point reduction.*

### 4. Update the Orchestrator to Use Simplification Parameters

* **File:** `multi_layer_trajectory_orchestrator.py`
* **Function:** `visualize_layer_trajectory`
* **Implementation:** Pass the new `decimation_factor` and `surface_segments` to `create_3d_trajectory_visualization`. You might want to make these user-configurable in your Streamlit app.

    ```python
    # In multi_layer_trajectory_orchestrator.py
    def visualize_layer_trajectory(self, layer_index: int, vessel_geometry_for_base: VesselGeometry,
                                 decimation_factor: int = 10, 
                                 surface_segments: int = 30) -> Optional[go.Figure]:
        if layer_index >= len(self.generated_trajectories):
            st.warning(f"Layer index {layer_index} out of bounds for generated trajectories.")
            return None
        
        selected_traj_info = self.generated_trajectories[layer_index]
        
        try:
            layer_info_dict = {
                'layer_type': selected_traj_info['layer_type'],
                'winding_angle': selected_traj_info['winding_angle'],
                'layer_id': selected_traj_info['layer_id']
            }
            
            mandrel_state_at_generation = selected_traj_info['mandrel_state']
            if mandrel_state_at_generation:
                # Create vessel geometry representing the mandrel surface this layer was planned on
                viz_vessel = self._create_layer_vessel_geometry(mandrel_state_at_generation, None) # layer_def not strictly needed if mandrel_state has all
            else:
                # Fallback to the base vessel geometry passed (e.g., initial liner)
                # This might happen if mandrel_state wasn't stored or planning was on initial liner.
                st.warning(f"Mandrel state for layer {selected_traj_info['layer_id']} not found. Using base geometry for visualization.")
                viz_vessel = vessel_geometry_for_base 

            return create_3d_trajectory_visualization(
                selected_traj_info['trajectory_data'],
                viz_vessel,
                layer_info_dict,
                decimation_factor=decimation_factor, # Pass the factor
                surface_segments=surface_segments   # Pass the segments
            )
                
        except Exception as e:
            st.error(f"Visualization error for layer {selected_traj_info.get('layer_id', layer_index)}: {str(e)}")
            import traceback
            st.error(traceback.format_exc())
            return None
    ```

### 5. User Controls for Detail Level in `app.py`

* **Concept:** Add sliders or input boxes in your Streamlit UI to allow the user to control the `decimation_factor` and `surface_segments` for visualizations.
* **File:** `app.py` (where you call the orchestrator's visualization method)
* **Implementation:**

    ```python
    # In your app.py, where you have a button or selectbox to show a layer's trajectory
    # viz_decimation = st.slider("Trajectory Detail (lower is more)", 1, 50, 10)
    # viz_surface_segments = st.slider("Mandrel Surface Detail", 10, 100, 30)

    # if st.button("Show Selected Layer Trajectory"):
    #   selected_layer_idx = ...
    #   fig = orchestrator.visualize_layer_trajectory(selected_layer_idx, 
    #                                                 st.session_state.vessel_geometry, # Base liner geometry
    #                                                 decimation_factor=viz_decimation,
    #                                                 surface_segments=viz_surface_segments)
    #   if fig:
    #       st.plotly_chart(fig, use_container_width=True)
    ```

### Considerations:

* **Default Values:** Choose sensible default values for `decimation_factor` and `surface_segments` that offer a good balance between detail and performance.
* **Minimum Points:** Ensure that after decimation, you still have at least a few points to draw a line (e.g., always include the first and last point of a trajectory segment). The example code `path_points[::decimation_factor]` is simple; more sophisticated decimation (like Ramer-Douglas-Peucker) could be used but is more complex to implement. For now, simple striding is a good start.
* **Metrics vs. Visualization:** Remember that these simplifications are for *display only*. Any calculations, analyses, or data exports should use the full-resolution trajectory data.

By implementing these changes, you should see a noticeable improvement in the responsiveness of your trajectory visualizations, especially for complex multi-layer designs.