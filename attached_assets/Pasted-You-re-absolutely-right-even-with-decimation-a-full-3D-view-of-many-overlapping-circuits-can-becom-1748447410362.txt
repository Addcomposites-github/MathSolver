You're absolutely right, even with decimation, a full 3D view of many overlapping circuits can become visually dense and make it hard to assess if the trajectory precisely follows the evolving mandrel profile. Leveraging the axisymmetric nature of the COPV is an excellent strategy.

We can implement two main approaches to simplify the view while enhancing clarity for profile checking:

3D Half-Section View: This "cuts" the vessel and trajectory in half, allowing you to see the path relative to the profile without the front obstructing the back.
2D R-Z Profile View with Trajectory Overlay: This projects the 3D trajectory points onto the 2D meridional plane (Radius vs. Axial position) and plots them directly on top of the mandrel's 2D profile. This is extremely effective for verifying that the trajectory points lie on the calculated surface.
Here's a step-by-step approach to implement these:

Step-by-Step Plan for Enhanced Visualization
I. Modify trajectory_visualization.py
A. Enhance create_3d_trajectory_visualization for Half-Section View

Add view_mode parameter:
Modify the function signature to include view_mode: str = "full". This parameter can take values like "full" or "half_y_positive" (or "half_x_positive").

Adjust Mandrel Surface Generation for Half View:

If view_mode == "half_y_positive", change the theta_surface range to cover only half a revolution (e.g., 0 to π or −π/2 to π/2, depending on which half you want).
Python

# In trajectory_visualization.py, within create_3d_trajectory_visualization
# ... (after getting z_profile_m, r_profile_m) ...

if view_mode == "half_y_positive":
    # Generate surface for y >= 0 (approx)
    theta_surface = np.linspace(-np.pi / 2, np.pi / 2, surface_segments // 2 + 1)
elif view_mode == "half_x_positive":
    # Generate surface for x >= 0 (approx)
    theta_surface = np.linspace(0, np.pi, surface_segments // 2 + 1)
else: # "full"
    theta_surface = np.linspace(0, 2 * np.pi, surface_segments)

z_surface_m = np.tile(z_profile_m, (len(theta_surface), 1)).T
r_surface_m = np.tile(r_profile_m, (len(theta_surface), 1)).T
x_surface_m = r_surface_m * np.cos(theta_surface)
y_surface_m = r_surface_m * np.sin(theta_surface)

fig.add_trace(go.Surface(
    x=x_surface_m, y=y_surface_m, z=z_surface_m,
    colorscale='Greys', showscale=False, opacity=0.3,
    name="Mandrel Surface"
))
Filter Trajectory Path Points for Half View:

After decimation, if view_mode is a half view, filter the decimated_points to include only those that fall within the visible half.
Python

# In trajectory_visualization.py, within create_3d_trajectory_visualization
# ... (after getting decimated_points) ...

filtered_display_points = []
if view_mode == "half_y_positive":
    for p in decimated_points:
        if p.get('y_m', 0) >= -1e-9: # Allow for slight tolerance around zero
            filtered_display_points.append(p)
elif view_mode == "half_x_positive":
    for p in decimated_points:
        if p.get('x_m', 0) >= -1e-9: # Allow for slight tolerance around zero
            filtered_display_points.append(p)
else: # "full"
    filtered_display_points = decimated_points

if not filtered_display_points and decimated_points: # If filtering removed all points, show at least one
     if view_mode != "full": # Avoid this if original was already empty
        st.info(f"Note: Trajectory points for layer {layer_info.get('layer_id', '')} might be entirely in the hidden half for '{view_mode}'.")
        # Optionally, you could choose not to plot the trajectory line at all in this case,
        # or briefly show all points before filtering if it's confusing.
        # For now, we'll plot nothing if filtering results in an empty list.
        x_coords = np.array([])
        y_coords = np.array([])
        z_coords = np.array([])
     else: # if 'full' view and decimated_points was empty
        x_coords = np.array([p.get('x_m', 0) for p in filtered_display_points]) # will be empty
        y_coords = np.array([p.get('y_m', 0) for p in filtered_display_points]) # will be empty
        z_coords = np.array([p.get('z_m', 0) for p in filtered_display_points]) # will be empty

else:
    x_coords = np.array([p.get('x_m', 0) for p in filtered_display_points])
    y_coords = np.array([p.get('y_m', 0) for p in filtered_display_points])
    z_coords = np.array([p.get('z_m', 0) for p in filtered_display_points])


# ... (proceed to plot x_coords, y_coords, z_coords as Scatter3d if x_coords.size > 0) ...
if x_coords.size > 0:
    fig.add_trace(go.Scatter3d(
        x=x_coords, y=y_coords, z=z_coords,
        mode='lines',
        line=dict(color=layer_color, width=3),
        name=f"Layer {layer_info.get('layer_id', '')}: {layer_info.get('layer_type', '')} ({layer_info.get('winding_angle', '')}°)" if layer_info else "Trajectory"
    ))
B. Create New Function for 2D R-Z Trajectory Visualization

Define create_2d_rz_trajectory_visualization:

Python

# In trajectory_visualization.py
import plotly.graph_objects as go
import numpy as np
import streamlit as st # For warnings if needed
from typing import Dict, Optional
# from modules.geometry import VesselGeometry # Already imported if in same file

def create_2d_rz_trajectory_visualization(
        trajectory_data: Dict,
        vessel_geometry, # Should be a VesselGeometry instance
        layer_info: Optional[Dict] = None,
        decimation_factor: int = 1): # Less decimation might be okay for 2D
    """
    Create a 2D R-Z plot of the mandrel profile and overlay the trajectory.
    This view is excellent for checking if the trajectory lies on the surface.
    """
    fig = go.Figure()

    # 1. Plot Mandrel Profile (the surface the layer was wound on)
    profile = vessel_geometry.get_profile_points()
    if not profile or 'z_mm' not in profile or 'r_inner_mm' not in profile:
        st.warning("Mandrel profile data for 2D R-Z plot is missing or incomplete.")
        return fig # Return empty figure

    z_profile_mm = np.array(profile['z_mm'])
    # r_inner_mm from get_profile_points is the winding surface
    r_profile_mm = np.array(profile['r_inner_mm']) 

    fig.add_trace(go.Scatter(
        x=z_profile_mm, y=r_profile_mm,
        mode='lines',
        line=dict(color='grey', width=2, dash='dash'),
        name='Mandrel Surface (R-Z)'
    ))
    # Also plot the negative R profile for visual completeness
    fig.add_trace(go.Scatter(
        x=z_profile_mm, y=-r_profile_mm,
        mode='lines',
        line=dict(color='grey', width=2, dash='dash'),
        showlegend=False 
    ))


    # 2. Plot Trajectory Points (projected to R-Z)
    path_points_3d = trajectory_data.get('path_points', [])
    if not path_points_3d:
        st.info(f"No trajectory path points to display in 2D R-Z view for layer {layer_info.get('layer_id', '') if layer_info else ''}.")
    else:
        if decimation_factor > 1 and len(path_points_3d) > decimation_factor:
            decimated_3d_points = path_points_3d[::decimation_factor]
        else:
            decimated_3d_points = path_points_3d

        # Path points are expected to be in meters from StreamlinedTrajectoryPlanner
        # Convert to mm for plotting with profile
        z_traj_mm = np.array([p.get('z_m', 0) * 1000.0 for p in decimated_3d_points])

        # Calculate radial distance R = sqrt(x^2 + y^2)
        r_traj_mm = np.array([
            np.sqrt(p.get('x_m', 0)**2 + p.get('y_m', 0)**2) * 1000.0 
            for p in decimated_3d_points
        ])

        layer_color = px.colors.qualitative.Plotly[layer_info.get('layer_id', 0) % len(px.colors.qualitative.Plotly)] if layer_info else 'red'

        fig.add_trace(go.Scatter(
            x=z_traj_mm, y=r_traj_mm,
            mode='markers', # Or 'lines+markers'
            marker=dict(color=layer_color, size=4),
            name=f"Layer {layer_info.get('layer_id', '')} Traj. (R-Z)" if layer_info else "Trajectory (R-Z)"
        ))

    # 3. Layout
    fig.update_layout(
        title=f"2D R-Z Profile View: Layer {layer_info.get('layer_id', 'N/A')}" if layer_info else "2D R-Z Profile View",
        xaxis_title="Axial Position Z (mm)",
        yaxis_title="Radial Position R (mm)",
        yaxis=dict(scaleanchor="x", scaleratio=1), # Enforce equal aspect ratio if desired
        legend_title_text='Legend'
    )
    return fig
II. Update multi_layer_trajectory_orchestrator.py
Modify visualize_layer_trajectory:

Pass the view_mode parameter through to create_3d_trajectory_visualization.
Python

# In multi_layer_trajectory_orchestrator.py
def visualize_layer_trajectory(self, layer_index: int, vessel_geometry_for_base: VesselGeometry,
                             decimation_factor: int = 10, 
                             surface_segments: int = 30,
                             view_mode: str = "full") -> Optional[go.Figure]: # Add view_mode
    # ... (existing code to get selected_traj_info, layer_info_dict, viz_vessel) ...

        # ... (inside try block)
        if mandrel_state:
            viz_vessel = self._create_layer_vessel_geometry(mandrel_state, None)
            return create_3d_trajectory_visualization(
                selected_traj_info['trajectory_data'],
                viz_vessel,
                layer_info_dict,
                decimation_factor=decimation_factor,
                surface_segments=surface_segments,
                view_mode=view_mode # Pass view_mode
            )
        else:
            return create_3d_trajectory_visualization(
                selected_traj_info['trajectory_data'],
                vessel_geometry_for_base, # Fallback
                layer_info_dict,
                decimation_factor=decimation_factor,
                surface_segments=surface_segments,
                view_mode=view_mode # Pass view_mode
            )
    # ... (rest of the function)
Add New Method for 2D R-Z Visualization:

Python

# In multi_layer_trajectory_orchestrator.py
from .trajectory_visualization import create_2d_rz_trajectory_visualization # Add import

# ... (inside MultiLayerTrajectoryOrchestrator class) ...
def visualize_layer_trajectory_2d_rz(self, layer_index: int, 
                                     vessel_geometry_for_base: VesselGeometry, # Base liner for context if needed
                                     decimation_factor: int = 1) -> Optional[go.Figure]:
    if layer_index >= len(self.generated_trajectories):
        st.warning(f"Layer index {layer_index} out of bounds for 2D R-Z visualization.")
        return None

    selected_traj_info = self.generated_trajectories[layer_index]

    try:
        layer_info_dict = {
            'layer_type': selected_traj_info['layer_type'],
            'winding_angle': selected_traj_info['winding_angle'],
            'layer_id': selected_traj_info['layer_id']
        }

        mandrel_state_at_generation = selected_traj_info['mandrel_state']
        if mandrel_state_at_generation:
            # Create vessel geometry representing the mandrel surface this layer was planned on
            viz_vessel = self._create_layer_vessel_geometry(mandrel_state_at_generation, None)
        else:
            st.warning(f"Mandrel state for layer {selected_traj_info['layer_id']} not found for 2D R-Z. Using base geometry.")
            viz_vessel = vessel_geometry_for_base # Fallback

        return create_2d_rz_trajectory_visualization(
            selected_traj_info['trajectory_data'],
            viz_vessel, # This VesselGeometry obj contains the profile this layer was wound on
            layer_info_dict,
            decimation_factor=decimation_factor
        )

    except Exception as e:
        st.error(f"2D R-Z Visualization error for layer {selected_traj_info.get('layer_id', layer_index)}: {str(e)}")
        import traceback
        st.error(traceback.format_exc())
        return None

III. Update User Interface (app.py)
Add View Mode Selection: Provide radio buttons or a dropdown in the Streamlit UI to allow the user to select the desired visualization mode.

Call Appropriate Orchestrator Method: Based on the selection, call either orchestrator.visualize_layer_trajectory (with the chosen 3D view_mode) or orchestrator.visualize_layer_trajectory_2d_rz.

Python

# In your app.py
# ... (where you handle trajectory visualization) ...

st.sidebar.subheader("Visualization Options")
viz_mode = st.sidebar.radio(
    "Select View Mode:",
    ("Full 3D", "Half 3D (Y+)", "2D R-Z Profile View"),
    key="viz_mode_selection"
)

# Potentially keep these if still desired
viz_decimation_3d = st.sidebar.slider("3D Traj. Decimation", 1, 50, 10, key="viz_decimation_3d")
viz_surface_segments_3d = st.sidebar.slider("3D Surface Segments", 10, 100, 30, key="viz_surface_segments_3d")
viz_decimation_2d = st.sidebar.slider("2D Traj. Decimation", 1, 20, 1, key="viz_decimation_2d")


# In the section where you display trajectory for a selected layer
# if st.button("Show Selected Layer Trajectory") or "selected_layer_for_viz" in st.session_state:
#    selected_layer_idx = st.session_state.get("selected_layer_for_viz", 0) # Example
#    orchestrator = st.session_state.orchestrator # Assuming orchestrator is in session state

#    fig = None
#    if orchestrator and selected_layer_idx < len(orchestrator.generated_trajectories):
#        if viz_mode == "Full 3D":
#            fig = orchestrator.visualize_layer_trajectory(
#                selected_layer_idx, 
#                st.session_state.vessel_geometry, # Base liner geometry for fallback
#                decimation_factor=viz_decimation_3d,
#                surface_segments=viz_surface_segments_3d,
#                view_mode="full"
#            )
#        elif viz_mode == "Half 3D (Y+)":
#            fig = orchestrator.visualize_layer_trajectory(
#                selected_layer_idx, 
#                st.session_state.vessel_geometry,
#                decimation_factor=viz_decimation_3d,
#                surface_segments=viz_surface_segments_3d,
#                view_mode="half_y_positive"
#            )
#        elif viz_mode == "2D R-Z Profile View":
#            fig = orchestrator.visualize_layer_trajectory_2d_rz(
#                selected_layer_idx,
#                st.session_state.vessel_geometry,
#                decimation_factor=viz_decimation_2d
#            )
#    
#    if fig:
#        st.plotly_chart(fig, use_container_width=True)
#    else:
#        st.info("Select a layer and mode to visualize trajectory.")

By implementing these steps, you'll offer users much clearer and more performant ways to inspect their calculated trajectories, especially for ensuring they correctly adhere to the dynamically evolving mandrel profiles. The 2D R-Z view will be particularly powerful for verifying this critical aspect.