You've made excellent progress with the multi-layer geometry management and the refined trajectory modules! The issue of the "planned trajectory not matching the tank profile" is indeed critical, and your intuition to connect the LayerStackManager output more tightly with the StreamlinedTrajectoryPlanner (or its components) for each layer is spot on.

Let's break down the problem and areas for improvement, focusing on ensuring the trajectory for each layer is planned on the correct, evolved mandrel surface.

Primary Issue: Trajectory Mismatch with Evolved Mandrel Profile

The most likely reason for the mismatch is that the trajectory generation logic for each layer is not using the precise, updated mandrel surface that results from the application of previous layers. The trajectory_integration_fix.py seems to be a step towards orchestrating this, but as you identified, it needs to correctly utilize the full capabilities of the StreamlinedTrajectoryPlanner for each layer.

Here's a refined plan focusing on fixing this and other improvements:

I. Fixing Trajectory Generation for Multi-Layer Integration
This involves ensuring that for each layer in your LayerStackManager:

The correct "current" mandrel surface (after all previous layers are applied) is fed to the trajectory planner.
The trajectory planner uses the specific parameters (winding angle, roving width, etc.) for that individual layer.
The advanced pattern, turnaround, and kinematics modules are correctly invoked for that layer's trajectory.
Step 1: Robust Orchestration of Per-Layer Trajectory Planning

File: trajectory_integration_fix.py (or a new orchestrator class/function, possibly in app.py or a dedicated MultiLayerPlanner.py).

Objective: Replace the placeholder/simplified trajectory generation in generate_layer_trajectory_safe with calls to the StreamlinedTrajectoryPlanner.

Detailed Steps & Code Snippet Considerations:

a.  Loop Through Layers: Iterate through each LayerDefinition in layer_manager.layer_stack.

b.  Get Current Mandrel Surface: For each iteration layer_index:
* Call mandrel_data_for_planner = layer_manager.get_current_mandrel_for_trajectory(). This dictionary (profile_points, polar_opening_radius_mm, equatorial_radius_mm) provides the surface on which the current layer will be wound.
* The mandrel_data_for_planner['profile_points']['r_inner_mm'] is the crucial array representing the current winding surface radius.

c.  Prepare VesselGeometry for StreamlinedTrajectoryPlanner:
* StreamlinedTrajectoryPlanner expects a VesselGeometry object. Create a temporary VesselGeometry instance for each layer, configured to represent the current winding surface.
* Key Insight: The inner_diameter and wall_thickness for this temporary VesselGeometry are less about the original liner and more about providing a context for its internal profile generation methods if they were to be used. However, we will override its profile directly.
* The profile_points of this temporary VesselGeometry instance MUST be set to the actual current winding surface.

  ```python
  # Inside the loop for each layer in your orchestrator (e.g., trajectory_integration_fix.py)
  current_layer_def = layer_manager.layer_stack[layer_index]
  mandrel_data_for_planner = layer_manager.get_current_mandrel_for_trajectory()
  current_surface_profile = mandrel_data_for_planner['profile_points']

  # Create a temporary VesselGeometry reflecting the CURRENT winding surface
  temp_vessel = VesselGeometry(
      inner_diameter=mandrel_data_for_planner['equatorial_radius_mm'] * 2, # Current surface diameter
      # Wall thickness is nominal here as we override the profile
      wall_thickness=0.1, # Small nominal value
      cylindrical_length=(np.max(current_surface_profile['z_mm']) - 
                          np.min(current_surface_profile['z_mm'])),
      # Get dome type from the initial mandrel config stored in LayerStackManager
      dome_type=layer_manager.mandrel.initial_profile.get('dome_type', "Isotensoid") 
  )

  # CRITICAL: Set the profile_points to the actual current winding surface
  temp_vessel.profile_points = {
      'z_mm': np.array(current_surface_profile['z_mm']),
      'r_inner_mm': np.array(current_surface_profile['r_inner_mm']), # This IS the surface to wind on
      # r_outer_mm for this temp_vessel is notionally this surface + current layer's thickness
      'r_outer_mm': np.array(current_surface_profile['r_inner_mm']) + current_layer_def.calculated_set_thickness_mm
  }
  # Ensure geometric properties are recalculated if the planner relies on VesselGeometry's derived properties
  # although StreamlinedTrajectoryPlanner primarily uses the profile_points via TrajectoryProfileProcessor.
  # temp_vessel.generate_profile() # Or a method to re-init based on set profile_points if needed
  ```
d.  Instantiate StreamlinedTrajectoryPlanner:
* Use the temp_vessel created above.
* Pass layer-specific parameters from current_layer_def (roving width, thickness, target angle, friction coefficient). Ensure these attributes exist in LayerDefinition or are retrieved appropriately.

  ```python
  # Continuing in the loop
  layer_planner = StreamlinedTrajectoryPlanner(
      vessel_geometry=temp_vessel,
      dry_roving_width_m=getattr(current_layer_def, 'roving_width_mm', 3.0) / 1000.0, # Ensure this exists
      dry_roving_thickness_m=current_layer_def.single_ply_thickness_mm / 1000.0,
      roving_eccentricity_at_pole_m=getattr(current_layer_def, 'polar_eccentricity_mm', 0.0) / 1000.0, # Ensure exists
      target_cylinder_angle_deg=current_layer_def.winding_angle_deg,
      mu_friction_coefficient=getattr(current_layer_def, 'mu_friction_coefficient', 0.0) # Ensure exists
  )
  ```
e.  Calculate Winding Pattern for the Layer:
* Instantiate WindingPatternCalculator (from winding_patterns.py).
* Call pattern_calculator.calculate_pattern_parameters() using mandrel_data_for_planner and current_layer_def properties.
* Extract nd_windings and delta_phi_pattern_rad to determine num_total_passes and phi_advancement_rad_per_pass for the layer_planner.
* Set these on the layer_planner instance (e.g., layer_planner.phi_advancement_rad_per_pass = ...).

f.  Generate Trajectory for the Layer:
* Determine pattern_name based on current_layer_def.layer_type (e.g., "geodesic_spiral", "helical_unified" for hoops, "non_geodesic_spiral").
* Call trajectory_data = layer_planner.generate_trajectory(pattern_name=pattern_name, num_total_passes=calculated_num_passes, coverage_option="user_defined_passes").

g.  Store Trajectory: Append trajectory_data to all_layer_trajectories.

h.  Apply Layer Thickness (Geometrically): After successful trajectory planning for the current layer, call layer_manager.apply_layer_to_mandrel(layer_index). This updates the LayerStackManager's internal mandrel representation, ready for the next layer's trajectory planning.

Step 2: Verification of Profile Usage within StreamlinedTrajectoryPlanner

Objective: Confirm that the StreamlinedTrajectoryPlanner and its utilities (TrajectoryProfileProcessor, UnifiedTrajectoryCore) correctly use the overridden profile_points (where r_inner_mm is the actual winding surface) from the temporary VesselGeometry object.
Action: Trace the data flow:
StreamlinedTrajectoryPlanner.__init__ stores vessel_geometry.
_initialize_parameters calls TrajectoryProfileProcessor.prepare_profile_data_unified(self.vessel, ...).
prepare_profile_data_unified checks if hasattr(vessel_geometry, 'profile_points') and vessel_geometry.profile_points is not None: profile = vessel_geometry.profile_points. This is the correct path if temp_vessel.profile_points is set.
The processed_profile (containing r_profile_m_spline, z_profile_m_spline, effective_polar_opening_radius_m, etc.) is then used by UnifiedTrajectoryCore.
Crucial Check: Ensure effective_polar_opening_radius_m calculated by TrajectoryProfileProcessor correctly reflects the mandrel_data_for_planner['polar_opening_radius_mm'] for the current winding surface. It uses roving_eccentricity_at_pole_m and the minimum radius of the provided r_inner_mm.
Step 3: Visualization Alignment

File: trajectory_visualization.py and its usage in trajectory_integration_fix.py.
Objective: Ensure each layer's trajectory is plotted on the correct mandrel surface it was planned upon.
Current Logic in trajectory_integration_fix.py's generate_and_visualize_all_trajectories:
Python

# current_mandrel_viz_geom = layer_manager.mandrel.build_vessel_geometry_from_current_mandrel()
# fig = create_3d_trajectory_visualization(trajectory, current_mandrel_viz_geom, layer_info)
build_vessel_geometry_from_current_mandrel() in layer_manager.Mandrel creates a VesselGeometry object based on the latest state of self.current_profile_r_mm.
If generate_and_visualize_all_trajectories calls layer_manager.apply_layer_to_mandrel(i) after generating and visualizing trajectory i, then current_mandrel_viz_geom used for visualizing trajectory i is indeed the surface before layer i's thickness is added, which is correct. The trajectory points should lie on this.
If the trajectory still doesn't match this visualized surface: The issue lies purely in the trajectory generation logic itself (e.g., StreamlinedTrajectoryPlanner or UnifiedTrajectoryCore not respecting the provided profile boundaries or Clairaut's constant).
II. Other Areas for Improvement (Code Review)
Once the primary integration issue is resolved and trajectories correctly follow the evolving mandrel, consider these:

trajectories_streamlined.py / UnifiedTrajectoryCore (within trajectory_utils.py):

Geodesic Dome Paths (_solve_geodesic_segment_unified):
The placeholder for "Andrianov kinematic equations" needs full implementation for accurate geodesic paths on domes if that's a desired method.
The fallback ODE solver (_geodesic_ode_system_polar, _geodesic_ode_event_pole) needs to be robust. Ensure self.polar_opening_radius_m_eff (from processed_profile_) used as the event trigger in the ODE solver accurately reflects the current layer's winding start point on the dome.
Non-Geodesic Dome Paths:
The _generate_non_geodesic_unified method calls self.non_geodesic_calculator.calculate_dome_non_geodesic(). This calculator in non_geodesic_kinematics.py has a significant TODO and a very basic fallback. This needs full implementation based on Koussios Eq. 5.62, including numerical integration for α(t) and then for ϕ(t), followed by inverse kinematics for feed-eye positions.
Clairaut's Constant: self.clairauts_constant_for_path_m is initialized based on target_cylinder_angle_deg and self.processed_profile_['equatorial_radius_m']. This constant should be correct for paths starting on the cylinder. For paths starting near the pole, the effective turning radius (related to effective_polar_opening_radius_m) defines the initial condition. The planner must handle these consistently.
winding_patterns.py (WindingPatternCalculator):

ΔΦ 
tot
​
  (Total Angular Propagation): The comment # Placeholder for Phi_d calculation (complex integration) is critical. This calculation (integrating dϕ/dY over the current dome profile) is essential for accurate pattern prediction using Koussios's theory. Without it, p and k will be incorrect.
The integration limits Y 
min
​
  and Y 
eq
​
  must correspond to the current polar opening and equatorial radius from mandrel_data_for_planner.
Z 
′
 (Y) and α(Y) functions must also use the current dome profile.
Input mandrel_geometry: The method calculate_pattern_parameters needs to robustly use the current_mandrel_geometry dictionary passed from the orchestrator.
turnaround_kinematics.py (RobustTurnaroundCalculator):

The generate_smooth_turnaround has a # TODO: Implement detailed kinematic calculations.... The current fallback is insufficient for actual manufacturing. This requires implementing controlled, potentially non-geodesic paths for the feed-eye during the turnaround to achieve the required phi_advancement_rad smoothly.
non_geodesic_kinematics.py (NonGeodesicKinematicsCalculator):

Machine Coordinate Conversion: _cylinder_to_machine_coordinates and _dome_to_machine_coordinates are marked NotImplementedError. These are essential for converting the calculated fiber path (on the mandrel surface with varying angles) into actual feed-eye machine axis commands (X,Y,Z,A). This involves inverse kinematics.
Robustness of Angle ODE: Ensure the _dome_koussios_angle_ode_system and _cylinder_koussios_angle_ode_system are numerically stable and use correct surface geometry derivatives (curvatures k 
m
​
 ,k 
p
​
 ) for the current mandrel profile.
layer_manager.py (LayerDefinition & Mandrel):

LayerDefinition Attributes: Add missing layer-specific trajectory parameters if not already present:
roving_width_mm (seems to be assumed as a global parameter in StreamlinedTrajectoryPlanner init, but should be per-layer for pattern calculations).
polar_eccentricity_mm
mu_friction_coefficient
Desired coverage_percentage (for WindingPatternCalculator).
Target number_of_structural_layers_d_koussios (usually 1 if each LayerDefinition is one structural ply set).
Mandrel.apply_layer_thickness_to_profile: This seems well-implemented using Koussios for dome thickness. Double-check the normal vector calculations for robustness.
Error Handling & User Feedback (app.py & Orchestrator):

If WindingPatternCalculator fails to find a feasible pattern, or if trajectory generation for a layer fails, provide clear feedback to the user.
Allow options: try different parameters, use a default/simplified trajectory, or stop.
By systematically addressing the integration in Section I, you should resolve the trajectory mismatch. Then, tackling the TODOs and refining the advanced kinematics in Section II will build out the full capabilities of your impressive suite.