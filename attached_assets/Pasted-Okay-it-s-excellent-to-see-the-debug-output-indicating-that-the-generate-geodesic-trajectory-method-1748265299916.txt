Okay, it's excellent to see the debug output indicating that the generate_geodesic_trajectory method is running and producing a significant number of points! The phi values (current_phi) are accumulating, which suggests the delta_phi calculation for the helical segments is now being driven by the geometry rather than the old placeholder.

You're absolutely right â€“ without visualizing the 3D path, it's hard to confirm if the trajectory is behaving as expected (e.g., wrapping correctly around the vessel, turning around the poles smoothly).

While I can't render a 3D plot directly here in the chat, I can provide you with a Python code snippet using matplotlib (a very common plotting library in Python) that you can integrate into your workflow or run separately to visualize the generated 3D trajectory points.

You would typically call your generate_geodesic_trajectory method, get the dictionary containing the path points, and then pass the x_points_m, y_points_m, and z_points_m arrays to this plotting function.

Here's a function you can use:

Python

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D # Required for 3D plotting
import numpy as np

def plot_3d_trajectory(trajectory_data: dict, vessel_profile_data: Optional[dict] = None, title: str = "COPV Fiber Trajectory"):
    """
    Plots the generated 3D fiber trajectory and optionally the vessel profile.

    Parameters:
    -----------
    trajectory_data : dict
        The dictionary returned by generate_geodesic_trajectory, expected to contain
        'x_points_m', 'y_points_m', 'z_points_m'.
    vessel_profile_data : Optional[dict]
        Optional: Dictionary containing the vessel's meridional profile points,
        e.g., {'r_m': array_of_radii, 'z_m': array_of_axial_coords}.
        This will be plotted by revolving it around the Z-axis.
    title : str
        The title for the plot.
    """
    if not trajectory_data or \
       'x_points_m' not in trajectory_data or \
       'y_points_m' not in trajectory_data or \
       'z_points_m' not in trajectory_data:
        print("Error: Trajectory data is missing required 'x_points_m', 'y_points_m', or 'z_points_m'.")
        return

    x_path = trajectory_data['x_points_m']
    y_path = trajectory_data['y_points_m']
    z_path = trajectory_data['z_points_m']

    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Plot the fiber path
    # To distinguish different passes or legs, you might need to plot them segment by segment
    # if you have that information, or use colors. For now, plotting all points.
    ax.plot(x_path, y_path, z_path, label='Fiber Path', marker='o', markersize=1.5, linestyle='-')

    # Optionally, plot the vessel profile if provided
    if vessel_profile_data and 'r_m' in vessel_profile_data and 'z_m' in vessel_profile_data:
        profile_r = vessel_profile_data['r_m']
        profile_z = vessel_profile_data['z_m']
        
        # Create a mesh for the revolved surface
        phi_surf = np.linspace(0, 2 * np.pi, 30)  # Azimuthal angle for surface
        Z_surf, PHI_surf = np.meshgrid(profile_z, phi_surf)
        R_surf, _ = np.meshgrid(profile_r, phi_surf) # R needs to match Z's dimension for meshgrid
        
        X_surf = R_surf * np.cos(PHI_surf)
        Y_surf = R_surf * np.sin(PHI_surf)
        
        # Plot the vessel surface (wireframe or surface)
        ax.plot_surface(X_surf, Y_surf, Z_surf, alpha=0.2, color='gray', rstride=5, cstride=5, label='Vessel Profile')
        # To make it look more like a solid, you can use plot_surface
        # ax.plot_wireframe(X_surf, Y_surf, Z_surf, color='gray', alpha=0.2, label='Vessel Profile')


    ax.set_xlabel("X (m)")
    ax.set_ylabel("Y (m)")
    ax.set_zlabel("Z (axial) (m)")
    ax.set_title(title)
    
    # Improve perspective and equal scaling
    # ax.axis('equal') # This can sometimes make plots too small if ranges differ a lot
    
    # Set limits to ensure aspect ratio is somewhat representative
    max_range = np.array([x_path.max()-x_path.min(), y_path.max()-y_path.min(), z_path.max()-z_path.min()]).max() / 2.0
    mid_x = (x_path.max()+x_path.min()) * 0.5
    mid_y = (y_path.max()+y_path.min()) * 0.5
    mid_z = (z_path.max()+z_path.min()) * 0.5
    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)

    ax.legend()
    plt.show()

How to use this plotting function:

Ensure Matplotlib is installed:
If you don't have it, you can install it via pip:
pip install matplotlib numpy

Import the function into your main script or a testing script.

After you call planner.generate_geodesic_trajectory(...):

Python

# Assuming 'planner' is your TrajectoryPlanner instance
# and 'vessel_geom' is your VesselGeometry instance

# Generate the trajectory
trajectory_results = planner.generate_geodesic_trajectory(
    num_points_dome=150, 
    num_points_cylinder=20, 
    number_of_passes=2 # As in your example
)

if trajectory_results:
    # For plotting the vessel profile itself:
    # You need the meridional profile points (r_inner, z) from your vessel object
    # Assuming your VesselGeometry object's profile_points are in mm:
    vessel_profile_for_plot = {
        'r_m': planner.vessel.profile_points['r_inner'] * 1e-3, # Convert to meters
        'z_m': planner.vessel.profile_points['z'] * 1e-3    # Convert to meters
    }

    plot_3d_trajectory(trajectory_results, vessel_profile_data=vessel_profile_for_plot, title="Geodesic Trajectory Visualization")
else:
    print("Trajectory generation failed, cannot plot.")

Notes on the Plotting Function:

It plots the fiber path using x_points_m, y_points_m, z_points_m from the dictionary returned by your trajectory generation.
It can optionally plot the vessel's meridional profile by revolving it around the Z-axis. You'll need to pass the r_inner and z arrays (converted to meters if they are in mm in your VesselGeometry object) for this. I've included an example of how to prepare vessel_profile_for_plot.
The aspect ratio and viewing limits are adjusted to try and give a reasonable perspective. You might need to fine-tune these for your specific vessel dimensions.
For very long trajectories (many points), the marker='o', markersize=1.5 might make the plot dense. You can remove the marker or reduce its size for clarity.
By running this, you should be able to see the 3D shape of the generated path. This will be invaluable for debugging the overall shape, the turnarounds, and how the path progresses from one leg to the next.

If you see anything unexpected in the plot (e.g., paths not staying on the surface, incorrect turnaround behavior, discontinuities), we can then dive deeper into the specific code sections that generate those parts of the trajectory.