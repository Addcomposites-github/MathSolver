Okay, let's proceed with **STEP 5: Turnaround Planner**.

**Task**: Handle polar region transitions, including defining the path on the mandrel and calculating the corresponding feed-eye kinematics. This step is crucial for linking successive winding circuits and achieving the desired pattern advancement.

First, let's define a data structure for machine coordinates:

```python
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
import numpy as np

# Assuming TrajectoryPoint and COPVGeometry (or similar) are defined
# from step1_core_data_structures import TrajectoryPoint
# from your_copv_geometry_module import COPVGeometry # Or a simplified version

# For placeholder, if not executed in the same environment:
if 'TrajectoryPoint' not in globals():
    @dataclass
    class TrajectoryPoint:
        position: np.ndarray
        surface_coords: Dict[str, float]
        winding_angle_deg: float # Angle with meridian
        fiber_tension: float = 0.0
        normal_vector: Optional[np.ndarray] = None
        tangent_vector: Optional[np.ndarray] = None
        velocity_vector_mps: Optional[np.ndarray] = None
        acceleration_vector_mps2: Optional[np.ndarray] = None
        arc_length_from_start: float = 0.0

if 'COPVGeometry' not in globals():
    # Simplified COPVGeometry for context
    @dataclass
    class COPVGeometry:
        # Example: these would come from the actual geometry definition
        def get_polar_opening_radius(self, dome_end: str = "front") -> float:
            # Placeholder
            return 0.025 # meters

        def get_dome_meridian_at_pole_region(self, z_axial: float, dome_end: str = "front") -> Optional[Dict[str, Any]]:
            # Returns {'rho': float, 'normal': np.ndarray} near the pole
            # Placeholder
            return None
        
        def is_point_colliding(self, point_3d: np.ndarray, is_feed_eye: bool = True) -> bool:
            # Placeholder for collision check with mandrel
            return False

@dataclass
class MachineCoords:
    """
    Represents the state of the filament winding machine axes.
    Units should be consistent (e.g., radians for rotation, meters for linear).
    """
    mandrel_rotation_rad: float = 0.0  # machine_X_mandrel_rotation_rad
    carriage_axial_m: float = 0.0      # machine_Y_carriage_axial_m
    feed_eye_radial_m: float = 0.0     # machine_Z_feed_eye_radial_m
    feed_eye_yaw_rad: float = 0.0      # machine_A_feed_eye_yaw_rad
    # Add other axes as needed (e.g., cross-carriage, feed-eye roll/pitch for >4-axis machines)
    timestamp_s: Optional[float] = None


class TurnaroundPlanner:
    """
    Handles the generation of fiber paths and machine motions for
    turnarounds in the polar regions of a COPV.
    """

    def __init__(self,
                 payout_length_m: float,
                 default_turnaround_points: int = 20):
        """
        Initializes the TurnaroundPlanner.

        Args:
            payout_length_m: The free fiber length from feed-eye to mandrel contact point (meters).
            default_turnaround_points: Default number of points for a generated turnaround path.
        """
        self.payout_length_m = payout_length_m
        self.default_turnaround_points = default_turnaround_points

    def generate_polar_turnaround_on_mandrel(self,
                                             entry_point: TrajectoryPoint,
                                             mandrel_geometry: COPVGeometry,
                                             polar_opening_radius_m: float,
                                             pattern_advancement_angle_rad: float,
                                             num_points: Optional[int] = None
                                             ) -> List[TrajectoryPoint]:
        """
        Generates the fiber path *on the mandrel surface* during a polar turnaround.
        This path achieves the required pattern advancement.

        Args:
            entry_point: The TrajectoryPoint where the fiber enters the turnaround region.
                         Must contain valid position and surface_coords (especially 'phi_rad', 'rho', 'z_cyl').
            mandrel_geometry: The COPVGeometry object. (Used for context, though not directly in this simplified path)
            polar_opening_radius_m: The radius of the polar opening around which the turnaround occurs.
            pattern_advancement_angle_rad: The azimuthal shift (in phi) required for the pattern.
            num_points: Number of points to generate for the turnaround path.

        Returns:
            List[TrajectoryPoint]: A list of TrajectoryPoints on the mandrel surface.
        """
        if num_points is None:
            num_points = self.default_turnaround_points

        turnaround_path_on_mandrel: List[TrajectoryPoint] = []

        # Assuming entry_point.surface_coords contains initial 'phi_rad', 'rho', 'z_cyl'
        # The path will be a circular arc at the polar_opening_radius_m in the rho-phi plane
        # combined with an axial movement to maintain contact if the dome is curved.
        # For simplicity, let's assume the turnaround happens largely in a plane near the pole.

        # Start of turnaround path on mandrel
        start_phi = entry_point.surface_coords.get('phi_rad', 0.0)
        start_rho = entry_point.surface_coords.get('rho', polar_opening_radius_m) # Should be at or near polar opening
        start_z = entry_point.surface_coords.get('z_cyl', entry_point.position[2]) # Axial position

        # Ensure entry rho is close to polar opening radius for a standard turnaround
        if not math.isclose(start_rho, polar_opening_radius_m, rel_tol=0.1): # Allow 10% tolerance
            print(f"Warning: Turnaround entry rho ({start_rho:.4f}m) is not close to polar opening radius ({polar_opening_radius_m:.4f}m). Path may be non-standard.")
            # For this simplified model, we'll force the turnaround to happen AT the polar opening radius.
            start_rho = polar_opening_radius_m


        # The turnaround path on the mandrel is essentially an arc at the polar opening.
        # The winding angle alpha (with meridian) is 90 degrees.
        # The fiber is tangent to the polar opening circle.
        
        # Total angle swept by the turnaround path on the mandrel.
        # This often involves more than just pattern_advancement_angle_rad to account for
        # the fiber wrapping around the boss. A common model is PI + pattern_advancement_angle_rad.
        # Or, it's the change in the direction of the fiber path on the surface.
        # Let's assume the pattern_advancement_angle_rad is the net phi shift needed.
        # The actual path around the pole might be ~PI radians.
        
        # Simplified: Arc on the polar opening circle by pattern_advancement_angle_rad
        # A more accurate model would consider the fiber wrapping around a physical boss.
        # For this example, we trace an arc for the given advancement.
        
        # Start from entry point, assuming it's the point where fiber is at polar_opening_radius_m
        # and winding angle is 90 deg (tangent to the opening circle).
        
        # The z-position might change slightly if the dome is not flat at the polar opening.
        # We will assume a simple planar arc for this example for the mandrel path itself.
        # The complexity comes in feed-eye kinematics.
        
        # Initial tangent vector on the surface is circumferential.
        # entry_tangent_surface = np.array([-np.sin(start_phi), np.cos(start_phi), 0]) # Assuming z is axis

        for i in range(num_points + 1):
            u = i / num_points  # Parameter from 0 to 1
            current_phi = start_phi + u * pattern_advancement_angle_rad
            
            # Position on the mandrel (assuming turnaround at constant z for simplicity here)
            current_rho = polar_opening_radius_m
            current_z = start_z # Simplification: assuming z is constant during this arc.
                                # In reality, z would follow the dome contour at rho=polar_opening_radius_m.
                                # For a more accurate model, z would be mandrel_geometry.get_z_at_rho_pole(current_rho)

            pos_3d = np.array([current_rho * np.cos(current_phi),
                               current_rho * np.sin(current_phi),
                               current_z])
            
            # Tangent vector on the mandrel surface for this circular path
            # Path is r(phi) = [R*cos(phi), R*sin(phi), Z_const]. dr/dphi = [-R*sin(phi), R*cos(phi), 0]
            tangent_on_mandrel = np.array([-current_rho * np.sin(current_phi),
                                           current_rho * np.cos(current_phi),
                                           0.0])
            if np.linalg.norm(tangent_on_mandrel) > 1e-9:
                tangent_on_mandrel = tangent_on_mandrel / np.linalg.norm(tangent_on_mandrel)
            
            # Surface normal (assuming z-axis of revolution)
            # For a polar boss area, normal is often primarily axial or defined by dome shape.
            # For a flat polar face, normal_vec = [0,0,1] (or -1 depending on end).
            # For a rounded dome edge at opening, it's more complex.
            # Let's assume axial normal for simplicity here.
            normal_vec = np.array([0.0, 0.0, 1.0 if current_z >=0 else -1.0]) # Highly simplified

            tp = TrajectoryPoint(
                position=pos_3d,
                surface_coords={'rho': current_rho, 'z_cyl': current_z, 'phi_rad': current_phi},
                winding_angle_deg=90.0,  # Fiber is circumferential (alpha=90) at polar opening
                tangent_vector=tangent_on_mandrel,
                normal_vector=normal_vec,
                arc_length_from_start=entry_point.arc_length_from_start + u * pattern_advancement_angle_rad * current_rho
            )
            turnaround_path_on_mandrel.append(tp)
            
        print(f"Generated {len(turnaround_path_on_mandrel)} points for turnaround path on mandrel.")
        return turnaround_path_on_mandrel


    def calculate_feed_eye_motion(self,
                                  mandrel_path_segment: List[TrajectoryPoint],
                                  mandrel_geometry: COPVGeometry
                                 ) -> Tuple[List[MachineCoords], List[bool]]:
        """
        Calculates the required feed-eye machine coordinates for a given fiber path
        segment on the mandrel surface.

        Args:
            mandrel_path_segment: List of TrajectoryPoints on the mandrel surface.
                                  Each point MUST have `position` and `tangent_vector`.
                                  `winding_angle_deg` (angle with meridian) is used for yaw.
            mandrel_geometry: The COPVGeometry object for collision checking.


        Returns:
            Tuple[List[MachineCoords], List[bool]]:
                - List of MachineCoords for each point in the mandrel_path_segment.
                - List of booleans indicating collision status for each feed-eye point.
        """
        machine_coords_path: List[MachineCoords] = []
        collision_flags: List[bool] = []

        for point_on_mandrel in mandrel_path_segment:
            if point_on_mandrel.tangent_vector is None:
                raise ValueError("TrajectoryPoint in mandrel_path_segment must have a valid tangent_vector.")

            # Feed-eye position: P_eye = P_mandrel - payout_length * Tangent_fiber_in_space
            # Tangent_fiber_in_space is approximately point_on_mandrel.tangent_vector if fiber is tangent to path on surface.
            # A more precise tangent_fiber_in_space considers the angle of payout from the surface.
            # For this, let's assume point_on_mandrel.tangent_vector is the direction of fiber departure.
            feed_eye_position = point_on_mandrel.position - self.payout_length_m * point_on_mandrel.tangent_vector

            # Basic Machine Coordinates (assuming simple 4-axis kinematics mapping)
            # This is a MAJOR simplification. Real inverse kinematics depend on machine type.
            # Example: For a lathe winder (mandrel rotation C, carriage axial Y, cross-feed X, eye yaw A)
            # machine_X_mandrel_rotation_rad from surface_coords['phi_rad']
            # machine_Y_carriage_axial_m from surface_coords['z_cyl'] or point_on_mandrel.position[2]
            # machine_Z_feed_eye_radial_m (cross-feed) calculated from feed_eye_position's projection.
            # machine_A_feed_eye_yaw_rad
            
            # Simplified mapping:
            # Mandrel rotation can correspond to the phi of the contact point
            phi_contact = point_on_mandrel.surface_coords.get('phi_rad', np.arctan2(point_on_mandrel.position[1], point_on_mandrel.position[0]))
            
            # Carriage axial position is z of feed_eye
            y_carriage_m = feed_eye_position[2]
            
            # Feed-eye radial position (distance of feed_eye from z-axis)
            z_feed_eye_radial_m = np.sqrt(feed_eye_position[0]**2 + feed_eye_position[1]**2)
            
            # Feed-eye yaw (A_mach = pi/2 - beta_srf)
            # beta_srf is angle with hoop. alpha_srf (winding_angle_deg) is angle with meridian.
            # beta_srf = pi/2 - alpha_srf_rad
            alpha_srf_rad = np.radians(point_on_mandrel.winding_angle_deg)
            beta_srf_rad = np.pi/2 - alpha_srf_rad
            a_feed_eye_yaw_rad = np.pi/2 - beta_srf_rad # This simplifies to alpha_srf_rad
                                                    # Andrianov Eq 21: A = pi/2 - beta [cite: 270, 304, 352, 353]

            machine_coord = MachineCoords(
                mandrel_rotation_rad = phi_contact, # Simplification
                carriage_axial_m = y_carriage_m,
                feed_eye_radial_m = z_feed_eye_radial_m,
                feed_eye_yaw_rad = a_feed_eye_yaw_rad
            )
            machine_coords_path.append(machine_coord)

            # Feed-eye collision avoidance
            is_colliding = mandrel_geometry.is_point_colliding(feed_eye_position, is_feed_eye=True)
            # Also check for collision of the fiber path itself (payout_length line segment)
            # For simplicity, just checking the feed_eye point.
            collision_flags.append(is_colliding)
            if is_colliding:
                print(f"Warning: Feed-eye collision detected at mandrel point {point_on_mandrel.position}, feed-eye pos {feed_eye_position}")

        return machine_coords_path, collision_flags

    def optimize_turnaround_time(self,
                                 machine_coords_path: List[MachineCoords],
                                 motion_constraints: Dict[str, Dict[str, float]]) -> List[MachineCoords]:
        """
        Optimizes the timing of machine movements during a turnaround to minimize time
        while respecting motion constraints (max velocity, max acceleration of axes).

        Args:
            machine_coords_path: The sequence of MachineCoords defining the turnaround.
            motion_constraints: Dict specifying {'axis_name': {'max_vel': float, 'max_accel': float}}
                                e.g., {'carriage_axial': {'max_vel': 0.5, 'max_accel': 2.0}}

        Returns:
            List[MachineCoords]: The machine_coords_path, potentially with updated timestamps
                                 or velocity profiles if a full optimization is done.
                                 For this conceptual implementation, it might just analyze feasibility.
        """
        print("Conceptual: optimize_turnaround_time")
        if not machine_coords_path:
            return []

        # This is a complex path optimization problem. Common approaches:
        # 1. Time-Optimal Path Parameterization:
        #    - Given the geometric path in machine space.
        #    - Find a time scaling s(t) (where s is path parameter, t is time) that minimizes total time.
        #    - This often involves finding switch points for bang-bang acceleration profiles.
        # 2. Iterative Refinement:
        #    - Start with an initial timing (e.g., constant velocity for the slowest axis).
        #    - Iteratively adjust velocities/accelerations to reduce time while respecting all constraints.

        # For this implementation, we'll do a conceptual check:
        # - Estimate required velocities and accelerations assuming a simple timing.
        # - Check if they violate constraints. A full optimizer is beyond this scope.

        estimated_total_time = len(machine_coords_path) * 0.1 # Assume 0.1s per point
        print(f"  Estimated time for {len(machine_coords_path)} points: {estimated_total_time:.2f}s (unoptimized).")
        
        # Example: Check average velocity for the carriage
        if len(machine_coords_path) > 1 :
            total_axial_dist = abs(machine_coords_path[-1].carriage_axial_m - machine_coords_path[0].carriage_axial_m)
            if estimated_total_time > 1e-6:
                 avg_axial_vel = total_axial_dist / estimated_total_time
                 if 'carriage_axial' in motion_constraints and avg_axial_vel > motion_constraints['carriage_axial']['max_vel']:
                     print(f"Warning: Average axial velocity ({avg_axial_vel:.3f} m/s) might exceed max_vel ({motion_constraints['carriage_axial']['max_vel']:.3f} m/s).")

        # A full implementation would involve iterative solution or dynamic programming along the path.
        # The output would be a re-timed list of MachineCoords, often with timestamps.
        # For now, returning the original path as a placeholder.
        # Timestamps could be added based on the optimized motion profile.
        
        # Placeholder: assign simple timestamps assuming constant velocity based on number of points
        if estimated_total_time > 0 :
            dt = estimated_total_time / (len(machine_coords_path)-1) if len(machine_coords_path) > 1 else 0
            for i, mc_point in enumerate(machine_coords_path):
                mc_point.timestamp_s = i * dt
                
        return machine_coords_path

```

**Explanation and Adherence to Requirements for Step 5:**

1.  **`MachineCoords` Dataclass**: Defined to represent the state of typical filament winding machine axes (mandrel rotation, carriage axial, feed-eye radial, feed-eye yaw). Timestamps are included for potential output from `optimize_turnaround_time`.

2.  **`__init__`**: Initializes with `payout_length_m` (crucial for feed-eye calculations) and a default number of points for generated paths.

3.  **`generate_polar_turnaround_on_mandrel` Method**:
    * **Path on Mandrel**: This method focuses on generating the *fiber's path on the mandrel surface*.
    * **Circular Arc at Polar Opening**: It implements a simplified turnaround path as a circular arc at the specified `polar_opening_radius_m`. The path sweeps through the `pattern_advancement_angle_rad`. This is a common simplification for the path near the pole where the fiber is essentially circumferential.
    * **Winding Angle**: Assumes the winding angle (with the meridian) is $90^\circ$ during this circumferential path around the polar opening.
    * **Output**: Generates a list of `TrajectoryPoint` objects on the mandrel, including 3D positions, basic surface coordinates, and tangent vectors along the circular arc.
    * **Limitations**: This is a simplified model. A true turnaround path is more complex, influenced by the boss geometry, fiber bending stiffness, and precise dome shape near the opening. The `start_z` is assumed constant, which is only true for a flat polar face.

4.  **`calculate_feed_eye_motion` Method**:
    * **Inverse Kinematics**: This method performs the inverse kinematics to find the feed-eye position and orientation.
    * **Feed-Eye Position**: Calculated by offsetting from the mandrel contact point along the negative fiber tangent vector by the `payout_length_m`.
    * **Feed-Eye Yaw**: The yaw angle (`machine_A_feed_eye_yaw_rad`) is calculated based on Andrianov's formula $A = \pi/2 - \beta_{srf}$[cite: 270, 304, 352, 353], where $\beta_{srf}$ is the winding angle with the hoop direction. Since `point_on_mandrel.winding_angle_deg` is $\alpha_{srf}$ (angle with meridian), $\beta_{srf} = \pi/2 - \alpha_{srf\_rad}$, so $A = \alpha_{srf\_rad}$.
    * **Machine Coordinates**: A simplified mapping to `MachineCoords` is provided as an example. Real-world mapping is highly machine-dependent.
    * **Feed-Eye Collision Avoidance**: A call to a placeholder `mandrel_geometry.is_point_colliding()` is included to represent this crucial check.

5.  **`optimize_turnaround_time` Method**:
    * **Conceptual Outline**: This method is conceptually outlined. Full implementation of time-optimal control for multi-axis robotic systems is very complex.
    * **Motion Constraints**: Takes `motion_constraints` (max velocity/acceleration per axis) as input.
    * **Goal**: To find the fastest execution time for the sequence of machine coordinates without violating constraints.
    * **Approach**: The explanation mentions common approaches like time-optimal path parameterization. The placeholder implementation does a very basic average velocity check and assigns simple timestamps.

**Smooth Entry/Exit Transitions**:
The `generate_polar_turnaround_on_mandrel` method takes an `entry_point`. Smoothness would rely on this `entry_point` being the actual end of the incoming helical/polar path, and the generated turnaround path starting tangentially from it. The `ContinuityManager` from Step 4 would be responsible for analyzing and potentially healing any discontinuities between the main path segment and this turnaround segment.

This completes the structure and core logic for the `TurnaroundPlanner`. The actual kinematic mapping and optimization would be the most machine-specific and complex parts in a real-world scenario.

Ready for **STEP 6: Integration & Testing** when you are.